for (int i = 0; i < n; i++) {       // O(n)
  // do something
}

for (int i = 0; i < n; i++) {       // O(n^2)
  for (int j = 0; j < n; j++) {
    // do something
  }
}

            n
          /   \
       n-1     n-2        ---------- 2^1 операций
      /  \     /  \
    n-2  n-3  n-3  n-4    ---------- 2^2 операций
   /  \
 n-3  n-4                 ---------- 2^3 операций
.............             ..........
n-n-1   n-n-2             ---------- 2^(n-1) операций

for (int i = 0; i < n; i++) {       // O(2n) == O(n)
  //method1()
  //method2()
}

for (int i = 0; i < n / 2; i++) {   // O(n/2) == O(n)
  //method()
}

for (int i = 0; i < n; i++) {       // O(2+n) == O(n)
  //method()
}
//method1()
//method2()

method1() - имеет сложность O(n^3)
method2() - имеет сложность O(n^2)
Если внутри method1() будет вызываться method2(),
то их сложности перемножаются:
O(n^3) * O(n^2) == O(n^5)
Если методы будут вызываться последовательно, то
их сложности складываются, т.е. берется
максимальная из них:
O(n^3) + O(n^2) == O(n^3)

void method1() {
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      for (int k = 0; k < n; k++) {
        // do something
      }
    }
  }
}

void method2() {
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      // do something
    }
  }
}

